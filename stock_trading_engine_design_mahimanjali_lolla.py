# -*- coding: utf-8 -*-
"""Stock Trading Engine Design - Mahimanjali Lolla.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JOYVNfB3ZbRXaQOKvawpVzCVBOY7jMy0
"""

import threading
import random
import time
import queue
import matplotlib.pyplot as plt

# Define constants
MAX_TICKERS = 1024  # Maximum number of different stocks that can be traded
MAX_ORDERS = 500  # Stop the simulation after processing this many orders

# Store matched trades for visualization
matched_trades = []

class Order:
    """
    Represents a stock order.
    Attributes:
    - order_type: 'Buy' or 'Sell'
    - ticker: Stock symbol (e.g., 'Stock1')
    - quantity: Number of shares
    - price: Price per share
    - timestamp: Time when the order was placed
    """
    def __init__(self, order_type: str, ticker: str, quantity: int, price: float):
        self.order_type = order_type  # Indicates if it is a buy or sell order
        self.ticker = ticker  # The stock symbol (e.g., 'Stock25')
        self.quantity = quantity  # Number of shares to trade
        self.price = price  # Price per share
        self.timestamp = time.time()  # Timestamp to track order timing

class StockExchange:
    """
    Simulates a real-time stock exchange where buy and sell orders are matched.
    Uses a queue-based system to store orders and a background thread to match them.
    """
    def __init__(self):
        self.buy_orders = queue.Queue()  # Queue for buy orders
        self.sell_orders = queue.Queue()  # Queue for sell orders
        self.running = True  # Control flag for stopping the matching engine

        # Start a separate thread for order matching
        self.matching_thread = threading.Thread(target=self.matchOrders, daemon=True)
        self.matching_thread.start()

    def addOrder(self, order_type: str, ticker: str, quantity: int, price: float):
        """ Adds a new order to the buy or sell queue """
        order = Order(order_type, ticker, quantity, price)
        if order_type == "Buy":
            self.buy_orders.put(order)  # Add buy order to the queue
        else:
            self.sell_orders.put(order)  # Add sell order to the queue

    def matchOrders(self):
        """ Continuously checks for matching buy and sell orders and processes trades """
        while self.running:
            if not self.buy_orders.empty() and not self.sell_orders.empty():
                buy_order = self.buy_orders.get()
                sell_order = self.sell_orders.get()

                if buy_order.ticker == sell_order.ticker and buy_order.price >= sell_order.price:
                    trade_quantity = min(buy_order.quantity, sell_order.quantity)
                    matched_trades.append((time.time(), sell_order.price))  # Store for visualization
                    print(f"Matched: {buy_order.ticker}, Quantity: {trade_quantity}, Price: {sell_order.price}")

                    if buy_order.quantity > trade_quantity:
                        buy_order.quantity -= trade_quantity
                        self.buy_orders.put(buy_order)
                    if sell_order.quantity > trade_quantity:
                        sell_order.quantity -= trade_quantity
                        self.sell_orders.put(sell_order)
                else:
                    self.buy_orders.put(buy_order)
                    self.sell_orders.put(sell_order)

            time.sleep(0.01)

    def stop(self):
        """ Stops the matching engine """
        self.running = False

# Simulating Real-Time Stock Transactions
def simulate_stock_transactions(stock_exchange):
    """ Generates random buy and sell orders for different stocks """
    tickers = [f"Stock{i}" for i in range(1, MAX_TICKERS + 1)]

    for _ in range(MAX_ORDERS):
        order_type = random.choice(["Buy", "Sell"])
        ticker = random.choice(tickers)
        quantity = random.randint(1, 100)
        price = round(random.uniform(10, 500), 2)
        stock_exchange.addOrder(order_type, ticker, quantity, price)
        time.sleep(random.uniform(0.1, 0.2))

    stock_exchange.stop()

# Visualization Function
def plot_trades():
    """ Plots a line graph showing price trends over time """
    if matched_trades:
        timestamps, prices = zip(*matched_trades)
        plt.plot(timestamps, prices, marker='o', linestyle='-', color='blue', alpha=0.7, label='Trade Prices')
        plt.xlabel('Time')
        plt.ylabel('Trade Price')
        plt.title('Stock Trade Price Trend Over Time')
        plt.legend()
        plt.show()
    else:
        print("No trades were matched.")

# Run the stock exchange simulation
if __name__ == "__main__":
    stock_exchange = StockExchange()
    simulation_thread = threading.Thread(target=simulate_stock_transactions, args=(stock_exchange,))
    simulation_thread.start()

    simulation_thread.join()
    print("Simulation complete. No more orders will be processed.")

    # Plot the results
    plot_trades()
    print("Plot generated.")
    #Code by Mahimanjali Lolla.